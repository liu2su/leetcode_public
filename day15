day14 我们学习了DFS的三种遍历方式，pre,in和post order,接下来我们学习BFS的实现方式：层序遍历（level order traversal）
level order traversal, is a method that traverse the whole binary level by level.
实现层序遍历，需要一个数据结构：queue的帮助。queue是一种first in first out 的数据结构，再借助iteration完成：
具体算法解释起来比较复杂，所以我这里只放代码：
----------------------------------------------
有几点需要注意：
1. 迭代包括了两个while循环，停止条件分别是：表示该层级需要弹出的元素为0时；queue为空时（遍历完成）
2. method首先要判断根节点是否为null
3. 在第二个while循环（size>0）结束后将temp array的值加入二维数组
----------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        bfs(root,result);
        return result;
    }

    public void bfs(TreeNode cur, List<List<Integer>> result){
        if(cur == null){
            return; //check if root is null
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(cur);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> array = new ArrayList<Integer>();
                while(size > 0){
                    TreeNode node = queue.poll();
                    array.add(node.val);
                    size --;
                    if(node.left != null){
                        queue.offer(node.left);
                    }
                    if(node.right != null){
                        queue.offer(node.right);
                    }
                }
            result.add(array);
        }


    }
}
