我们首先先将字符串里面多余的空格（指字符串前后的空格，单词中间多于一个的空格）去掉，再字符串全部翻转，
最后逐个翻转每个单词
重点和难点是移除空格，为了保证O（1）的空间复杂度，我们去除空格的任务要在原字符串完成,此外要去除字符串首尾的空格，
还要给每个单词之间加上一个空格，那么我们如何实现这种复杂的操作呢？
其实还是要用双指针法：
1. 我们需要记住的是：快指针指向的是新数组需要的元素，慢指针指向的是快指针指向的元素要加入的位置，
   明白这个关系我们就能得出结论，双指针操作实际上把字符串中非空格元素加入到慢指针中，这个操作实际上是删除了所有的空格，
   只留下字母，那我们如何增加空格呢？这需要我们意识到：我们需要关注fast什么时候遍历完一个完整的单词，
   假设字符串没有前后空格，当fast遇到一个空格时，就说明fast已经遍历完一个单词了，此时slow指向的位置要增加一个space,然后
   slow移到下一个位置，此时我们要用一个while循环将空格后的元素通过双指针找出非空格的元素插入新数组，直到遇到下一个空格为止
