24. Swap Nodes in Pairs
    We still use dummy head strategy for this problem， 这是因为如果我们想交换两个节点，必须依靠前一个节点的next重新指向交换后的新节点，
    此外我们还需要一个指针来指向我们当前遍历的位置，遍历结束标志为：cur.next ==  null && cur.next.next == null,(注意cur.next在前避免控制帧异常)即当前指针后只有一个或者0个结点，
    cur 初始化为指向虚拟头节点，这样也适用于空链表的情况
    
    /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(-1, head);
        ListNode cur = dummy;
        while(cur.next != null && cur.next.next != null){
            ListNode temp1 = cur.next;
            ListNode temp3 = cur.next.next.next;
            cur.next = cur.next.next;
            cur.next.next = temp1;
            temp1.next =  temp3;
            cur = cur.next.next;

        }

        return dummy.next;
    }
}
