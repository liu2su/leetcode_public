首先定义 一个hasp_map，key放a和b两数之和，value 放a和b两数之和出现的次数。
  在异位词中，因为需要寻找的元素的所有可能性是确定的而且数量较少（一共有26个英文字母），因此我们选用数组作为哈希表来统计一个元素出现的次数，数组的尺寸为元素的所有可能性（a-z），
  key值为元素，value为出现的次数。我们同样采取统计元素出现次数的方法来解决这道题目，因为元素（整数）出现的可能性很大（可以是几百，几千几万等等），数组下标不能包括所有可能的值，
  所以我们只能使用map或者set来处理，因为我们不仅要储存key，还要储存key出现的次数，所以用hashmap。
遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。
定义int变量count，用来统计 a+b+c+d = 0 出现的次数。
在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。
  这里需要注意的是当我们在遍历后两个数组的时候，当我们发现后两个数组的两个元素和的复数与map里的一致时，count不要单纯的加1,而是要加key所对应的value(可以通过举例来理解)
最后返回统计值 count 就可以了
