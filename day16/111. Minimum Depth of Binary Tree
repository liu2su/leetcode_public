111. Minimum Depth of Binary Tree
注意：nodes without children are called leaf nodes， 这一点很容易出错
上一题我们通过求高度，求出二叉树的最大深度，而找出高度的方式是找出左右子树的最大高度。
那我们是不是可以反过来想，求出左右子树的最小高度，是不是就是minimum depth了？
这样想只对了一半，因为有特殊情况：
如果根节点下发左子树为空，右子树为1个节点，此时的正确答案应该是2，而不是1，反之亦然。不光是根节点，其他节点也一样，也就是说我们要排除
一个节点的左子树为空右子树不为空的情况。
根据以上分析，我们来使用递归三要素：
1 确定递归函数的参数和返回值
    参数为要传入的二叉树根节点，返回的是int类型的深度。
2 确定终止条件:
    终止条件也是遇到空节点返回0，表示当前节点的高度为0。
3 确定单层递归的逻辑:
    除了求出左右子树的最小值外，还需要判断特殊情况

代码如下：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        int result = 0;
        result = recursion(root);
        return result;
    }
    public int recursion(TreeNode node){
        if(node == null){
            return 0;
        }
        int right = 0;
        int left = 0;
        if(node.left == null && node.right != null){
            right = recursion(node.right) + 1;
            return right;
        }

        if(node.left != null && node.right == null){
            left = recursion(node.left) + 1;
            return left;
        }

        return Math.min(recursion(node.left), recursion(node.right)) + 1;
    }
}
